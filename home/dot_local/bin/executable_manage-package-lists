#!/usr/bin/env bash
set -euo pipefail

# Get the actual user (handle sudo context)
REAL_USER="${SUDO_USER:-${USER:-$(id -un)}}"
USER_HOME=$(eval echo "~$REAL_USER")
PACKAGES_DIR="$USER_HOME/.config/install"

# Create directory if it doesn't exist
mkdir -p "$PACKAGES_DIR"

# Initialize files if they don't exist
touch "$PACKAGES_DIR/packages-explicit.txt"
touch "$PACKAGES_DIR/packages-aur.txt"

# Get current package lists
CURRENT_EXPLICIT=$(mktemp)
CURRENT_AUR=$(mktemp)
trap 'rm -f "$CURRENT_EXPLICIT" "$CURRENT_AUR"' EXIT

# Get all explicitly installed packages
pacman -Qqe >"$CURRENT_EXPLICIT" 2>/dev/null || true

# Get AUR packages - use pacman for foreign packages (more reliable)
pacman -Qqm >"$CURRENT_AUR" 2>/dev/null || true

# Read existing lists
OLD_EXPLICIT="$PACKAGES_DIR/packages-explicit.txt"
OLD_AUR="$PACKAGES_DIR/packages-aur.txt"

# Find changes
ADDED_EXPLICIT=$(comm -13 <(sort "$OLD_EXPLICIT" 2>/dev/null || true) <(sort "$CURRENT_EXPLICIT") | tr '\n' ' ')
REMOVED_EXPLICIT=$(comm -23 <(sort "$OLD_EXPLICIT" 2>/dev/null || true) <(sort "$CURRENT_EXPLICIT") | tr '\n' ' ')

ADDED_AUR=$(comm -13 <(sort "$OLD_AUR" 2>/dev/null || true) <(sort "$CURRENT_AUR") | tr '\n' ' ')
REMOVED_AUR=$(comm -23 <(sort "$OLD_AUR" 2>/dev/null || true) <(sort "$CURRENT_AUR") | tr '\n' ' ')

# Update the lists
cp "$CURRENT_EXPLICIT" "$PACKAGES_DIR/packages-explicit.txt"
cp "$CURRENT_AUR" "$PACKAGES_DIR/packages-aur.txt"

# Also generate dependencies list for reference
pacman -Qqd >"$PACKAGES_DIR/packages-deps.txt" 2>/dev/null || true

# Add timestamp and change info
{
  echo "# Last updated: $(date)"
  if [[ -n "$ADDED_EXPLICIT" ]]; then
    echo "# Added explicit: $ADDED_EXPLICIT"
  fi
  if [[ -n "$REMOVED_EXPLICIT" ]]; then
    echo "# Removed explicit: $REMOVED_EXPLICIT"
  fi
  if [[ -n "$ADDED_AUR" ]]; then
    echo "# Added AUR: $ADDED_AUR"
  fi
  if [[ -n "$REMOVED_AUR" ]]; then
    echo "# Removed AUR: $REMOVED_AUR"
  fi
} >"$PACKAGES_DIR/last-updated.txt"

# Change ownership to the real user (in case run with sudo)
chown -R "$REAL_USER:$REAL_USER" "$PACKAGES_DIR" 2>/dev/null || true

# Re-add the updated files to chezmoi to keep the repository in sync
if command -v chezmoi >/dev/null 2>&1; then
  # Run as the real user to ensure proper chezmoi context (fixes root directory error)
  sudo -u "$REAL_USER" -E chezmoi re-add "$PACKAGES_DIR/" 2>/dev/null || true
fi

# Send notification if in desktop environment (compatible with QuickShell)
send_notification() {
  local summary="$1"
  local body="$2"

  # Try multiple notification methods for compatibility
  if command -v gdbus >/dev/null 2>&1; then
    # Use D-Bus directly (works with QuickShell notification server)
    sudo -u "$REAL_USER" DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u "$REAL_USER")/bus" \
      gdbus call --session \
      --dest=org.freedesktop.Notifications \
      --object-path=/org/freedesktop/Notifications \
      --method=org.freedesktop.Notifications.Notify \
      "Package Manager" 0 "package-manager" "$summary" "$body" "[]" "{}" 5000 2>/dev/null || {
      # Fallback to notify-send if available
      if command -v notify-send >/dev/null 2>&1; then
        sudo -u "$REAL_USER" notify-send "$summary" "$body" --icon=package-manager 2>/dev/null || true
      fi
    }
  elif command -v notify-send >/dev/null 2>&1; then
    # Use notify-send as fallback
    sudo -u "$REAL_USER" notify-send "$summary" "$body" --icon=package-manager 2>/dev/null || true
  fi
}

if [[ -n "${DISPLAY:-}${WAYLAND_DISPLAY:-}" ]]; then
  EXPLICIT_COUNT=$(wc -l <"$PACKAGES_DIR/packages-explicit.txt" 2>/dev/null || echo "0")
  AUR_COUNT=$(wc -l <"$PACKAGES_DIR/packages-aur.txt" 2>/dev/null || echo "0")

  NOTIFICATION_BODY="Explicit: $EXPLICIT_COUNT packages\nAUR: $AUR_COUNT packages"

  if [[ -n "$ADDED_EXPLICIT$ADDED_AUR" ]] || [[ -n "$REMOVED_EXPLICIT$REMOVED_AUR" ]]; then
    CHANGES=""
    [[ -n "$ADDED_EXPLICIT$ADDED_AUR" ]] && CHANGES="Added: $ADDED_EXPLICIT$ADDED_AUR"
    [[ -n "$REMOVED_EXPLICIT$REMOVED_AUR" ]] && CHANGES="$CHANGES Removed: $REMOVED_EXPLICIT$REMOVED_AUR"
    NOTIFICATION_BODY="$NOTIFICATION_BODY\n$CHANGES"
  fi

  send_notification "Package Lists Updated" "$NOTIFICATION_BODY"
fi
